* Introduction

** Data 
- data is a collection of raw or unorganised fact or details like text symbols figures etc 
- measured in bytes and bits 
- have meaning after processed 

** information
- processed and organised structured data 
 
** Database 
- is an electronic place or sysytem where data is stored manages and updated 

** DBMS 
- database = stores the data 
- set of programs = help in acess ,add ,update ,delete 

** why not file system 
- data redundancy 
- difficulity in acessing 
- integrity problem 
- security reasons  

* Abstraction

** Three schema architecture
- overall design of the database is call db schema 

*** Physical or internal level 
- internal schema
- lowest level shows how data is stored 
- define algorithms allows efficient acesss to data 

*** Logical or conceptual level
- conceptual schema  
- design of database 
- what data is stored and relationship between the data

*** View level or extrenal level 
- external schema 
- have sub schemas 
- provides different information view to the different end users 
- provides a security mechnism from acessing certain parts of database to certain users 

** Instance of database 
- the data stored in the datbase at a particular instance of time 

** Db schema 
- attributes of table 
- consistency constaints 

** Data models 
- provides a way to describe design at logical level 
- examples -- ER model , RElationship model , object -oriented model etc 

** Database languages 
- DDL -- data definition language  - specify dtatbase schema 
- DML -- data manipulation language - express dtatabse queries and updates 
- both features can be present in singgle language for example SQl langugae 
 

** Database Administrator or DBA 
- person who has central control of both the dtata and the programs that acess those data 

*** Fuction of DBA 
- Schema definiton 
- storage structure and acess methods 
- authorization control 
- routine maintainanace 
- security patches , backups , urgrades 

** DBMS application architecture 
- client machine 
- server machine 

*** T1 architecture 
- client . server , and dbms on same system 

*** T2 archi 
- client and apllication send direct queries to the database 

*** T3 archi 
- client  server network with applicaion 
- application then network with the database system 
- data intgrirty - app server minimises datat corruption 
- scalibility - distributed servers 
- security - client cannot acess direct dattabse 

* ER Model 
- entity relationship  model
- contains objects called as entitie and attributes  and their relationship 
- unique attribute -- primary key 

** Entity  
- same objects that share same attributes 

** Attributes 
- to define entity 
- domain , values , permitted , non permitted 

*** Simple 
- cannot be divided further 

*** Composite 
- can be divided into subparts 
- if want to refer to only coponent of attribitute 

*** Single valued 
- only one vale attribute 

*** Multi valued
- atttribute having multiple values 

*** Derived 
- can be derived from another attribute 

*** Null value 
- does not have value of it 
- 
** Relationship
- link between two or more entities 

*** Strong relationship
- have primary key 

*** Weak relationship
- does not have primary key 

** Degree of relationship 

*** unirary relationship 
- only one entity 

*** binary relationship 
- two attribute relationship

*** tertiry relationship
- theree attribute relationship

** Relationship constraints 

*** Mapping cardinality  
- number of entities to which another entity is assosiated by relationship 

**** One to one 
- in two entity sets one entity only associates with another one 

**** One to many 
- one entity associated with many entitites in another set  

**** Many to one  
- many entities are associated with single entity 

**** Many to Many 
- multiple entities associated with multiple entities in two diffrent sets of entities 

*** Participation constraints
- Partial participation -- not all entities are involved in relationship instance  
- Total participation -- each entity must be involved in one relationsip instance 
- weak entity has total participation constraint 
- strong may not have 

** Extended ER Features 
*** Specilisation 
- (is a ) is used for inheritence  
- it is used to split up entity into futher sub entity sets basis of features or functionalities 
- certion attributes may not be applicable to parent entity set 

*** Generalization 
- reverse of specilisation 
- when certian properties of two entities are overlapping we ca make new entity set as a super class 
- bottom up approach 
- simpler , attributes not get repeated 

*** Participation Inheritence 
- if parent entity set participate in relationship then chilt entity will also participate in relationship 

*** Aggregation 
- to show relationship among relationship 
- abstraction is applied and avoid redundancy by making relationship as an entity itself 


* Steps to make Er diagram 
- identify entity sets 
- identify attributes and thier types 
- relationship and constraints = mapping and participation 

** ER model of banking system 
- banking system  - branches (name) 
- bank - coustomers 
- customers - accounts and loans 
- customer associated with some banker 
- bank have employes 
- accounts - saving or current
- loan and payemt schedules 

** Entity sets 
- branch 
- customer 
- employee 
- saving account 
- current account 
- loan 
- payemt of loan 

** Attributes and types 
- branch -- name , city , assets , liabilities 
- customer -- name , adress , contact no , dob  ,age , cus-id 
- employee -- name , employee-id , cont no , dependent name , year of service , start date 
- saving account - acc on , balance , interest rate , daily withdrawl limit 
- current acc - acc-no , balance , pertranscation charges , overdraft - account 
- loan - loan no , amount 
- payment - payemt no , date , amount 

** Relationship and constaints
- customer borrow loans (total participation of loan )
- loan orriginated by branch 
- loan and payment 9(total pati of loan)
- customer deposit account 
- customer and employee 
- employee menage by employee 

* Relational model 
- organises the data in the form of tables 
- each table is  assigned with unique name 
- a single row is tuple represent single record 
- colums represnts attributes 
- relation schema - defines the design and strucutre of relation 

** Degree of table 
- no of attributes or colums 

** Cardinality 
- no of tuples 

** Retaional key 
- uniquesly represnt each tuple 

** RElational model keys 
*** Super key 
- any p and c of attributes in table which uniquely identify each tuple 

*** Candidate key 
- minimum subset of super keys to unikely identify tuple 

*** Primary key 
- key from candidate key with least attributes 

*** Alternate 
- all keys in candidate key other than primary key 

*** Foreign key 
-  creates relation between two tables 
- a primary key of parent table that is used as an attribute in child table is caalled foreign key 

*** Composite key 
- primary key fored by two attributes 

*** Surrogate key 
- generated automatically by DB 
- used as primary key 

** Integrity constraints 
- Crud should be done with integrity so that Db should be consistent

*** Domain constraints 
- restricts that data types of every attribute 

*** Entity Constraints 
- every tale should have primary key 

*** Insert constraint 
- value cannot be inserted in child class if it is not laying the parent table 

*** Delete Constraint 
- value in parent table caannot be deleted if lying the child table 
- if wanted to delete it on delete cascade is used 
- or we can make the corrosponidng value null in child table 

** Key Constriants 
*** Not null
- ensure that if applied attribute should not be null 

*** UNique Constraint 
- ensure that all the values in attribute are unique 

*** DEfault constraint
- it is used to add default value to the columnn is no value specify them 

*** Check 
- limit value range (Domain)

*** Primary key 
- not nulll 
- uniquely identify each tuple 

*** Foreign key constraint 
- keep relation between two tables 
- primay in parent table 
- foreign in child table 

* Trasformation of er model to relational model 

** er diagram notations to relations 
*** Strong entity 
- entity primary key used as relation pk 
- fk are added to establish relationship with other relations 

*** Weak entity 
- pk of its correspoiding strong entity wiill be addes as pk 
- pk of the relation wiil be composite pk 

*** Single values attributes 
- represented as colums in tables 

*** Composite attributes 
- handled by creating a special attribute itself in the original relation for composite relation 

*** Multivalued attributes 
- new tables are created for multivalued attribute 
- pk of the entity is used as column fk in new table 

*** Derived attributes 
- not used in the tables 

*** Generalisation 
**** Method 1 
- crerate a table for higher lvl entity 
- for lower lvl entity set create tables for all attributes and with pk of higher vvl entity 

**** Method 2 
- erate tables of all lower lvl entity sets not for higher lvl 
- invldue all atrributs of lower entity as well as of higher lvl entity set 
- redundancy 


* Normalization 
- to avoid redundancy in db and not to store redundAant data 
- otherwise insertion , deletion , updation anomalies arises 
- consistency is maintained , organised data 

** Functional dependency 
- it is the relationship between primary key attribute to other attributes 
- primary key is known as determinant and other is called as  dependent 

*** Types of FD 
**** Trivial FD 
-  a and b have trivial fd if b is subset of a 

**** Non - Trivial FD 
- a and b have non trivial dependency if b is not a subset of a 

*** Rules of FD 
**** Reflexive 
- if a is set and attributes and bet is subset of it then b dependends on  A

**** Augmentation 
- id b can be determined from a then adding an attribute dont change aything  

**** Transitivity 
- if A determines b and b dtermines c then a determines c 

** Anomilies 

*** Insertion anomaly 
- wehn certion datat cannot be insertion without persence of other data 

*** Deletion anomaly 
- wehn deletion of data results in unintended loss of other important data 

*** Updation Anomaly 
- when upadate of single data value requires other data to be updated 

** What to do in normilation 
- decompose table into multiple tables 
- until single respomsibilty principle is achieved  

** Tupes of normal forms 
*** 1NF
- every relation cell must have atomic value 
- relation must not have multivalued attributes 

*** 2NF 
- no partial dependency 
- all non prime attributes must be fully depennedt on pk 
- non prime attribute can not be depend on the part of the pk 

*** 3NF
- no transitivity exists 
- non prime attribute should not find a non prime attribute 

*** BCNF (Boyce codd normal form )
- non prime should not be determne prime attribute 

* Trsnsaction 
- a unit of work done against db in logical sequence 
- it is logical unit of work that contain one or more sql statements 
- statements either gets compltesed or if any failure happens it gets rolled back 

** Acid properties 
-  for integrity of data 

*** Atomicity 
- either all the operations of transaction are reflect or none are 

*** Consistency 
- db must be conssitent after transaction happens 
- integrity constraints must be maintained before and after transaction 

*** Isolation 
- multiple transaction can happen in the system in isolation without interfering each other 
- multiple transaction should occur sequentely in the system 

*** Durability 
- after transaction completes the changes has made to the database persist even if there is system failure 


** States of transaction 
***  active state 
- read or write operation occures 
- comes to partially commited state 
- if any failure occures it leades to the failed state 

*** Partial commited state 
-  after transaction is executed changes will we saved in buuder in main memory 
- if changes are permaned it will tranfer to commited ststae 
- if any failure it will go to the failed state 

*** Commited state 
- wehn updates are made permanred it is commited state 
- cannot rollback from commited state 

*** Failed state 
- when any failure occures in transaction which makes impossible to continue the execution o fthe transaction 

*** Aborted  state 
- when reach at failure state all changes made in buufer are reversed and reches aborted sate 

*** Terminated state 
- a transaction if it is either commited or oborted 


* HOw to implement atomiticity and durability 
** Shadow copy scheme 
- based on making copies pf db 
- only one transcation at a time 
- dp pointer on disk point curent copy of db 
- all updates are done on new copy , old copy remain untouches 
- if transcation is to be aborted system deletes the new copy 
- if T suceees 
- os makes sure all pages of new copy written on disk 
- db system updates the db pointer to point thenew copy of db 
- old copy will be delelted , new copy will be curretn copy 
- t have been comitted at the point db pointer written on disk 

*** Durability 
- if system fails before th eupdated db pointer is written on the disk 
- when system restarts it will read db pointer will see original content of db 
- no effects of t wiill be visible 
- if db pointer gets updated then sytem fails then system will read new copy of db 
- disk system provide atomic updates to entire block or at least one disck sector se we make db pointer lie in single sector by placing it begning of block 
- inefficient -- due to copy large files 

** LOg Based recovery 
-  log is a sequence of records 
- stored in stable storage so if failure occurs it can be recovered 
- any operation is perforemd it will be stored in the log 
 
*** Deffered db modification 
- ensuring atomicity by recording all db modifications in log but deffering the execution of operations until final executoion of action 
- log info is used to take action 
- if system crased before t completed , log got ignored 
- if t completed=s log executed 
- if failure accour while updating we perform redo 

*** Immediate Db modification 
- db modification take place wile t is still in active state  
- db modificqations written by active t are uncomitted modification 
- in failure , old logs are used for restoring 
- upades after logs stored in stable storage 
- in failure before t completes , it got aboreted and undo t 
- if t completed and stystem crashes , new value used to redo 

* Idexing 
- it is used to optimise the performance of dattabse by minimising the number of disk acesses required wehn query is processed 
- it is used to locate and acess the data
- search is primary key or candidate key of table 
- data refernce - pointer hold the disck block where value is stored 
- it is optioanl but increae speed 
- index file always sorted 

** Indexing methods 
*** Primary index (clustering index)
- a primary index is an index whose search key also defines the sequential oreder of file 
- based on key atribute - no of enteries = no of blocks 
- based on non key attribute - no of enteries = no of unique keys 
- multilvl indexing - indexing with multiple lvl 
**** Dense index 
- when every search key is present in index file it is called dense index  

**** Sparse Index 
- an index apper only for some of the search key values 

*** Secondary indexing 
- used in unsorted keys 
- dense indenxign 

* NOSQL

- not only sql 
- provide flexible schemas and large amount of data and high user laods 
- schema free 
- data structure used are not tabular 
- can handle large amount of data 
- store data in a format other than relational 

** Data advantages nosql 
*** Flexible schema 
- nosql has flexible schema 
- do not have pre defined dchema 

*** Horizonatal scaling 
- horizontal scaling known as scale out 
- colections are self contained and not coupled relationally 
- do not have join themselves across nodes

*** High Availability 
- nosql databases are highly available and faster due to its auto replication feacture 
- stored at multiple servers 

*** Esay insert and read operations 
-  the data whic hwe want to access together will be stored together 
- they do not require join so queries are very fast 

*** Caching Mechanism 
*** no sql use in more cloud appliations 

** When to use nosql 
- fast paceed development 
- storage of structured and semi structurwed data 
- huge volume of data 
- modern applicatipn like micro services 

** nosql db misconceptiona 
- relationship data can also stored in nosql 
- nosql databases can support acid transactions 


** Types of nosql 
*** Key value 
- these associates a value  from simple string to complex object with key which is used to kepp track of object 
- these are compact and efficient index strucutes 
- ideal for sytems that need to be able to find and retrieve data in constant time 


*** Column oriented 
- the data is stored such that each row of a column will be  next to other rows from that same columns 
- stores data in row and read row by row 
- columnar databases can quickly aggregrate the vaue of a given column 


*** Document based stores  
- each document contains pairs of fields and values
- values can typically be variety of types including things like strigns , numbers , booleans , arrays or objects 
- support acid  properties , suitable for transactions
used cases unclude trading platforms and mobile app development etc  
eg - mongodb , couchdb

*** Graph based stores 
- each data element is stored as a node 
- the connectinos between elements are called links or re;ationship 
- a graph database is optimised to capture and search relation between data elements 
- these usually run alongside with other type of dtatbases 
- uses casesare fraud detection , social network and knowledge graphs 


** Nosql databases disadvantages 
- Data redundancy 
- databases are larger than sql databases 
- update and deletion are costly 
- all types of data model doesnot fulfill your application needs 
- do not support acid properties in general
- do not support data entry with consistency constraints 



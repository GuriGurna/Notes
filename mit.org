* Lecture 1

** computation
- computation  is of two types:
- declarative 
- imperative = how to do something 

** earliest computeers = having fixes programs
- calculators do specific problems

** stored program computer 
- take input from the used and perform accordingly

** memory contains 
- control centre - set of instructions 
- airthmetic logic unit-converts input into output
- program counter -helps changing the instructions 

** fixed set of primitives helps programmer to build a good program 

** python 
- python is a high lvl language - more advanced set of primitives are used as used in low lvl language 
- general lvl language 
- interpreted language understand-uses code and run the program rather than going through compiler and 
  catching the bugs
  
** syntax -how to put together the expressions or informatrion

** static sematics - helps to understand which programs are meaningful 

** full sematics - what does program means and what happen when we run it  

** two types of values 
- numbers- integers or float 
- string - set of characters 

** operators
   + - * / 

* Lecture 2

** combine in expression : operands and operators

** variables have dynamic values 
- that it changes its value to the newest value assign to it 
x = 1 (create variable x and assign value 1 to it )
x=x*x (bind x to 9 )

** statements 
- legeal commands that python can intrepet 
- print , assignment etc 

** variables names   
-28 keywords block 

** branching program
- can change the orfer of instructions based on a test
- if and else statements 
- if values is tre it follow series of instruction 
- otherwise it will follow other instructions

if :
    block of commands 

else:
    block of commands 

** boolean combination 
- and , or , not 

** iteration or loops 
while loop 

* Lecture 3

** iterative program
- choose variable that count
- initilise it outside the loop
- set up end test (variable)
- construct block of code 

** steps 
- ans =0
- ans*ans<=0
- if yes then  ans = ans + 1
- if no then print ans and stop

x = 16
ans = 0
while ans*ans < x :
    ans = ans + 1
print ans 

** exhaustive enumeration
-trying all the reasonable values unit get the solution

x = 10
i = 1
while i<10:
    if x%i==0:
        print desirable , i
    i = i + 1

** for loop
for <value> in range <end point>:

** tuple 
- ordered sequence of elements 
- cannot change it 
- represent ny (1,2,3,4)
- for first element [0]
- for last element[-1]
- for more than 1 indexes [1:3]

** strings also support slicing , selection of particular elements 

* Lecture 4

** Decomposition 
- it is breaking of code into different modules
- each module make its own sence and can run independently

** abstraction 

** functions 
- let us break into modules
- make us supress details 

** def - creating a function 
- followed by a name 
- then we have (x) 
- x is an input we take from the user and will  be used everywhere it is seen in the function  

** return 
- it stops the whole computation and return the value of it 

** none 
- when return none is used it does not return any value from it 
- any bindings in the function to a particular variable will not affectg and golabal binding int he while code 
 
** recursion 
- taking a problem and breaking into steps and adding some stps for execution 
- inductive step 
- break problem into the simpler version of same problem and add some other steps 
* Lecture 1

** computation
- computation  is of two types:
- declarative 
- imperative = how to do something 

** earliest computeers = having fixes programs
- calculators do specific problems

** stored program computer 
- take input from the used and perform accordingly

** memory contains 
- control centre - set of instructions 
- airthmetic logic unit-converts input into output
- program counter -helps changing the instructions 

** fixed set of primitives helps programmer to build a good program 

** python 
- python is a high lvl language - more advanced set of primitives are used as used in low lvl language 
- general lvl language 
- interpreted language understand-uses code and run the program rather than going through compiler and 
  catching the bugs
  
** syntax -how to put together the expressions or informatrion

** static sematics - helps to understand which programs are meaningful 

** full sematics - what does program means and what happen when we run it  

** two types of values 
- numbers- integers or float 
- string - set of characters 

** operators
   + - * / 

* Lecture 2

** combine in expression : operands and operators

** variables have dynamic values 
- that it changes its value to the newest value assign to it 
x = 1 (create variable x and assign value 1 to it )
x=x*x (bind x to 9 )

** statements 
- legeal commands that python can intrepet 
- print , assignment etc 

** variables names   
-28 keywords block 

** branching program
- can change the orfer of instructions based on a test
- if and else statements 
- if values is tre it follow series of instruction 
- otherwise it will follow other instructions

if :
    block of commands 

else:
    block of commands 

** boolean combination 
- and , or , not 

** iteration or loops 
while loop 

* Lecture 3

** iterative program
- choose variable that count
- initilise it outside the loop
- set up end test (variable)
- construct block of code 

** steps 
- ans =0
- ans*ans<=0
- if yes then  ans = ans + 1
- if no then print ans and stop

x = 16
ans = 0
while ans*ans < x :
    ans = ans + 1
print ans 

** exhaustive enumeration
-trying all the reasonable values unit get the solution

x = 10
i = 1
while i<10:
    if x%i==0:
        print desirable , i
    i = i + 1

** for loop
for <value> in range <end point>:

** tuple 
- ordered sequence of elements 
- cannot change it 
- represent ny (1,2,3,4)
- for first element [0]
- for last element[-1]
- for more than 1 indexes [1:3]

** strings also support slicing , selection of particular elements 

* Lecture 4

** Decomposition 
- it is breaking of code into different modules
- each module make its own sence and can run independently

** Abstraction 

** functions 
- let us break into modules
- make us supress details 

** def - creating a function 
- followed by a name 
- then we have (x) 
- x is an input we take from the user and will  be used everywhere it is seen in the function  

** return 
- it stops the whole computation and return the value of it 

** None 
- when return none is used it does not return any value from it 
- any bindings in the function to a particular variable will not affectg and global binding int he while code 
 
** Recursion 
- taking a problem and breaking into steps and adding some stps for execution 
- inductive step 
- break problem into the simpler version of same problem and add some other steps 

* Lecture 5

** Arbitiairy piecision 
- L is used for long int values 

- 1<= mantissa < 2 
- mantissa exponent in range -1022 to 1023
- 1 bit sign 
- 11 exponent
- 52 bit mantissa 

** repr()
- it represents the int value as string
- and round offf float values to the 17th value 
- print also round off any float value 

** Import math 
- helps to perform the basic functional of maths like sqrt etc

** == in float produces error 
- might not be an exact number 
- cannot enumerate all the guesses or incountable 

** Sucessive approximation 
- start with initial guess 
- choose rangr line (100)
- if f(guess) close guess return guess 
- else get better guess 

** Bisection method
- to guesss the answwr in the middle and search wheather it is on right oer left \

* Lecture 6

** Non scalar two types
- tuples add  strings 
- both are immutable
- and cannot be changed
- however new one can be made with slight changes 

** Mutuable
- lists 
- lists are mutuable that they can change
- tech = ['mit' ,'caltech']
- ivys  =['h',' y ','b']
- univs= []
- univs.append(tech) =  is used to append any list 
- list.remove("string") = is used to remove any strign from the list
- list[0] = will givews the first element of the lsit 


* Lecture 7 
** Lists 
-  are mutuable 
- if we assign a new value to any index in a lsit the old value will be replaced 
- if we make  a new list and make  it equal to the old list and change any element of old list same will be happen ewith new one 

** Distionaries 
-  are mutuable 
- but are not in order
- it has key as index 
- <key,value>

** Efficiency 
- it includes the choice of efficiency 
- map the problems into class algorithm
- how much memory is need to complete the program 
- space and time 
- what is the number of basic strps needed as a function input size 

** Random access model 
- best case - minimum steps
- worst case - most step 
- expected case - avg

* Lecture 8 
- as rate of growth goes size of problem also grows
- asymptatic notation
- big of notation - upperlimits to growth of function as input get large 

- n=1000   nanosecond speed
- log      10 nanosecond 
- linear   1 microsecond 
- quadratic   1 millisecond 
- exponential  10^284 years  

** Ordders of growth
- in some cases quadratic my run in less time than linear 
- it all depends upon the type of the input 

** search a sorted list 

def search(s, e):
    answer = None
    i = 0
    numCompares = 0
    while i < len(s) and answer == None:
        numCompares +=1
        if e == s[i]:
        answer = True
        elif e < s[i]:
        answer = False
        i += 1
    print answer, numCompares


* lecture 9

** Binary search      
- take a sorted list 
- take a element from the list which is mid point of list 
- last-first/2 
- if the element which have to be find is less than the mid  element then we can cut the upper half of the list and vise versa 
 
** Implement List  
- Making memort cells in the list 
- if one memory cell conatain 4 elements then we have to ass 4 to move to second celll 

** Linked List 
- start from begining 
- setting a particular number of lements to jump to a desired element 

** Generalixe Binary Search 
- pick the mid point
- check to see if this is the answer
- if not reduce to smaller problem and repeat 

** How to sort the list before the search 
- we cannot look at the list sub linear time 
- nor can sort in linerar time

*** time tke to types of searches
- first case is linear case in which we directly search in case of unordered list 
- second is first we sort ans then search 
    which take n log n time - which is takes larger time than the linear search 

** How to sort a list 
*** Loop type
- pick th first elemtnt and compare with the next elements 
- if the element is larger then any of the element in the list 
- than that element will be swapped and which further will comapre with rest of the list 
- this menthod will  be continued for all the elements in the list until the list get sorted 

* Lecture 10 

** Divide and Conquer algorithm 
- split the problem into several sub problems of same type 
- solve independtyly 
- combine sloutions

** Merge sort
- order of complexicity is n which is sum of no of elemets in the list
- divide th elists into half
- divide again until we have single lists 
- in this we compares the first elemts of both the lists and Merge them into the new list 
- in same way we put all the elemts in the new list 

** Difference between assert and exception

*** Assert 
- if conditions are true then the code will run otherwise it will throws error

*** Exception
- if anything happen exception will automaticalyl handle the error


* Lecture 11

** Debbuging 
- process of assertaining why the program is failing 
- function = is the code is giving the answer we are especting 
- performance = is the program working with efficiency of time 

** Defensive Programming 
- includes both validation and debugging 

** Testing 
- we comape the input and outputs pairs 

*** Two classes of testing 
**** Unit Testing 
- evalidate each piece of code independently 

**** Integration testing 
- check whole the working of program 

** Test Suite 
- small piece of code to check 

** Methods or  tools for error free code 
- Print statements
- reding the code
- be systematic 
- reduce search space
- localize souce of problem 
- how cound it have produce this result
*** Scientific method
- study available data 
- test resutls 
- always know what answer one is especting from the program
- find the simpliest form of input 


* Lecture 12 

** Debugging 
- make sure that you can revert
- saving old version 

** Optimizaton Problems 
- A function to maximise or min 
- A set of constrains 
- find the shortest path 

*** Bin Packing 
- settign up different part or lines in a sequence of manner 
- Sequence alignment 
- Problem Reduction 


** Dynamic Programming
- overlapping sub - problems
- optimal substructure  

* Lecture 14 

**

- how long a program take to run not only depend upon the input but also the sizs of the solution 

** big o 

- complexicity of the code 
- depends uponthe codins of input  
- pseudu polynomial 
- polynomical in numeric value of input 

** In dynamic programing

- we trades time for space
- dont be intimated by exponential problems 
- dynamic programming is broadly useful 
- problem reduction 

** Module 

- collection of selected function 
- refers to functoins using . notation 
- like input math , input.sqrt(11)
- import set , import table (table.member(e,t)) 

** Object oriented programming 

- classes 
- used for data abstraction 
- abstraction data types 
- object = collection of data and function 
- use defined types 

*** message passign metaphor

- one obejct cam passs message to another object 
-l.sort()  , c.area()  (pass message caslled area to c )

** class 

- class is the collection of objects with characteristics in comman 


* Lecture 15 

** Class 
- template to create instances of an object 
- each instances have some attributes 

** Class template 
- __init__  it creates an instances
- it uses self to refer to that instance 
- methods - can acess values of the specific instance 
- data hiding - one can only acess instance values through defined method 
- in methods it include instance and fields 

** Methods for classses 
- __init__  = create instance  
- __str__  =  peinted represention convert into strign 
- __cmp__ = comparisons 
- __eq__ = comparing things are things same or not 


** Operator overloading 
- operator overloading is using the same operatore like + , - for different operations 
- + can be used to add two strings , two numbers 

* Lecture 16 

** Superclass 
- any sub class can inherit method from the parent class 
- showding also called overriddding  

** child class 
- also know as sub class 

** INheritence 
- in inhertience a class is called superclass 
- and anpther class called sub class 
- the sub class inherites from the super clss wihc adds attributres to superclass 
- we sent the paremeter of sub class to parent class 


** Super() Function 
- super function is used for inheritin g from parent class 

** Overridding parent methods 
- wehn we dont want to to use all the metods or behaviouss use overriddign 


** Multiple inheritence 
- when a class inherit attributes or methods from more then one parent class 


* Lecture 17  

** Dealing with and exploiting randomness 
- making sence of data 
- evaluating quality of answers 

** Example 
- Start simple 
- cartesian coordination 
- simulate 
- random walk  

** Program 
- location 
- compasss point 
- field 
- drunk

* Lecture 18 

- Inner loop that stimulates one trial 
- emclose inner loop in a loop that conducts appropriate of trials 
- calculate and present statiatics

- Always label all the axes and also look while doing 
- ask if the answer makes any sense 
- consistant with other evidence 
- systematic about debuggginh 
- debugg with simple steps insted of mutiple lines 

** Some examples using random walk
- Brownian motion 
- stock market 
- movement of macromolecules
- kinetics 
- model evolution 
 
** Pylab 
- it gives operation of numbers 

** Array 
- in numpy array is matrix 
- it is a type which turns list to array 

* Lecture 19 

** Baised random walks 
** polymorphysim 
- the code which will work with different types of objects 

** Distribution 
- tell where diffeetn people ended up where 

** manhattan project 
- first large scale computer deployement 
- project of nuclear detonation 
-did it using monte carlo simulation 
- use simulation when cannot get enalatically solution 


** Generate a sample of representation scenarioes 
- simulation as an experiment device 
- runs everytimes as an experiment device
- simulations are descriptive not precrisctie 
- that they describe and give consequences 
- used to guess and check various possibilities 


* Lecture 20 

** Simulation 
- Stochastic or deterministic simulation 
- static vs dynamic (time)
- discrete vs continues  

** Inferential statistic 
- random sample tends to exhibit same properties is the population from which it is drawn 


** Example 
- pi r square = area 
- pi d = circumference 
- 1650 bc = 3.16
- 223/71 < pi < 22/7


** Bufffon laphace 
- in shade/in square = shahed area / square area 

* Lecture 21 

* Sample 
- how many samples 
- how much accurate 

- if answer is valid it does not mean it is corret 
- check resut agaist physical reality 

** Spring constat
- also called as stiffness 
- how much enery it takes to compress the spring \
- houtrk law = forse = -kx 
- by putting differetn weight on the spring we can calculte the spring constant 

** Objective Function 
- least squales fit 
- summation(obsecuation - prediction )
- pylab has a buitin function calles polyfir 
- a polynomial with degree one in this case set of points(distance ,  forces , i)
- linear regression 
- R**2 - cofficient of determination
- R**2 = 1- ee/data variance 
- does closer != better 


* Lecture 22 

** Normal distribution 
- also called natural , bell curve , gaussian 
- described into to paerts 
- mean and standard deviation 
- not matter how many time we perform the task 
- shape will always be same 
- standard devistion is staticial dispersion 

** Rollign dice 
- if we get 7 ,11 we win 
- if get 2, 3, 12, lose 
- otherwise number become point 
- uniform distributon - each vaylue have equally likey changce to occur 
- eg - birtday distribution 
- exponential are perdictablebecause answer lie loe to the mean 


** Misuse of data 
- beware of people who give properties of data but not thedata 
- correlation does not imply causation 
- lurking variables - noes not look at cause an effect relation 
- non- response fact
- non representiive samples 
- data enhancement - data give with comaparative data is useless 


* Lecture 23

** Data enhancement 
- Index portfolio 
- managesd portfolio 
- efficient market hypotheisi 
- markets are informationally efficient 
- which means maekt is memory less 


** Stock and market 
- adjusted for risk 
- every stock behave differently 
- how to model this distribution 
- with the help of different propertion of distribution we can model it 
- we use multiplicative method insted fo additive 


* Lecture 24 

** Computational thinking - the process 
- invent usefull abstration 
- formulate the errors  
- implementation fo the experiment 
- run experiment 
- evalute results of the experimatn 
- repeat as needed 

** Two A's of the computationa; thinking 

*** Abstraction 
- choosing right abstraction 
- operating in terms of multiple layers of abstraction 
- defining relationship between layers 

*** Automation 
- thinkk in terms ofo mechanizing our abstraction 
- mechanization is possible 
- we have exating notation and models 
- there is some machine 

** Example sof computational thinking 
- how difficult is the problem and how best can i solve 
- theoritical computer sicsence gives meaning to these aswers 
- thinking recursively 
- reduction , embedding , transformation , simulation 

** What one group does 

- help people quality lives 
- techinical area 
- algorith desgn 
- signal processign 
- software systems 

** Specific research activities 
- cilnically usefull information from electric signals 
- heart , brain, connected anotomy ]
- signal processign , algoritms , clustering , machine learnibng
- predictign adverse cardiac events 
- detectign and responding to epileptic seizuers 


** Example perdecting death 
- acs syndrome - 15 prcetn people suufer cardiac related death 
- who should be treated with statins 
- it can be done with morphological variability 

*** Useful to find ptients 
- who should be monitored more closely 
- treated more aggressively 
eg implanted difibrillatators 


** why python
- easy to learn 
- simple syntax 
- easier debugging 
- modern language 
- objectoreinted programmign 
- popular 
- use in industry 
- large set of labraries 

** Debugging problems 
- understant problem 
- break into sm-all parts 
- identify usefull abstraction 
- code and unit test 
- start with pseudo code 
- be symmetric 

** Algorithms 
- big o notation 
- kinds of algorithms 
- specific algorithms 
- optimixatino problems 

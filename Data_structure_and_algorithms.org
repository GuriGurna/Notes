* Data Structure 

- these are way to arrange data in main memory for efficients usage 
- arrays , linked list ,stack , linked list etc 
- thee are some problems in coding that can be sloved sfficiently by using data structures 

* Algorithms 

- Sequence of steps to solve a given problem
- eg = sorting an array  

* Definationa 

** Database 
- collections of information in permanent storage for faster retrival and updation

** Data warehouse 
-  management of huge data of legacy  data ( data that is kept at a different place from our fresh data in then database to make process of 
  retrival and updation fast ) for better analysis 

** Big data 
- analysis of too large or complex data which cannot be deal with the traditional data processign application 

* Algorithmic Complcixity

- 

* Techniques to measure time efficieny 

** Measuring time to execute 
- we can mesure time with  start = time.time() (time.time() - start()) 

*** Problems 
- time changre with implementation 
- different machines different times 
- does not work with small input 
- no relation of input with time

** Counting operations 
- it has  relation of input with time
- same on different devices 

** Order of growth 
***  big o notation or o()
- it determines the time complexicity of a program 
- calculate the opearations and removes all the constants 
- then remove all the multiplicatives constants
- then choose the bigeer factor 

*** Big omega notatoin notation 
- it provide us the best case of the algoritm 
- it indicates the minimum time required by an algorithm for all the input values 

*** Types of order of growth 
**** Constant 
- do not depend upon the input 

**** Linear 
- directly ddpends upom input size 

**** Quadratic 
- in input increases 2 times time increases 4 times 

**** Logarithmic 
- if input increases by some factor time increase by constant one 

**** n log n  
- some sorting 

**** Exponential 
- opposite of log 
- 
 
* Types of data structure 

** Primitive 
- int ,char ,float ,pointer 
- these are the basic tools used in any programming language  and directly operate on machine instructions

** Non Primitive 
- these are derived from primitive data strucutres and are more complicated 
- they emphasise in grouping same or different data items 

*** Linear 
- array ,linked list , stacks  ,queques ,hashing 
- arranged in a liner manner 
- every item is related to previus or next item 
- implementatinon is easy 

*** NOn linear 
- data cannot be traveresed in a single run 
- tree ,graph 
- data is linked with each other 

** Static 
- whose size and strucuteres assosiaayed memory location are fixed at compile time 
- Example : array

** Dynamic 
- Dynamic strucutre are those which expands or  shrinks depending upon the program 
- Example : linked list using pointers 


* Array 
- it is a linear data structre used to store mutiple item of same type in continous location 
- ordered set consists of fixed number of elements 

** calculating location of element in array 

*** in one dimensional array 
- loc a[i] = base address + w*(i)

*** in two   dimensional array 
- loc a[i,j] = base adress + w[m(i)+(j)]
- w is storage of a element 
- m is no of columns 
- n is no of rows 

** Advantages of array  
- Easy to create or use 
- direct indexing :O(1)
- sequential acess :O(N)

** Disadvantage of array 
- searching :O(n)
- if sorted :O(logn)
- inserting and deleting :O(n)
 
** Refrential Array 
- instead of storing values it stores values location (call by reference )
- can store heterogeneous values 
- slow speed 

** Dynamic Array 
- size can be adjusted 
- it is just static array but having size doubled 


* Stack 
- a stack is a linear data structure in which data items are  inserted and delected at one end only 
- restricted data structure  

** Operaton in stack 
- push = insertion  
- pop = delection 
- top = give top element of stack 
- isempty = returns true if stack is emply else false 

** overflow 
- when stack becomes full of elements 

** under flow 
- when we pop out all the elements from the stack 

** Algorithm for push operation 

- push_stack(stack,top,max,item)
  if top = max 
  print overflow
  top = top+1
  stack(top)= item 
  exit 
  
- pop_stack(stack,top,item)
  if top = 0 
  print underflow 
  item = stack(top)
  top -= 1 
  exit 

* Queue 
- linear data structure 
- restricted data structre
- based on first in first out concept
- rear and front are two points of insertion and deletion 
- when front and rear value is 1 it means only one elelemt is present 
- at front = 0 no element can be deleted 


** Circular queue 
- when front becomes equal to rear but it reaches max capacity we cannot add another element 
 
*** Insertion 
- (queue,n,f,r,item)
  if  f=1 ,r=n or f=r+1 then overflow
  if  f=null 
  set f=1 ,r=1 
  else if r=n then set r=1
  else r=r+1
  set queue[r]=item

*** Deletion 
- (queue,n,f,r,item)
  if f=null then write underflow 
  set item = queue[f]
  if f=r!=null
  set f=r=null
  else if  f=N
  set f=1 
  else f =f+1


* Linked List 
- collection of connected  nodes 
- dynamic data structure 
- insertion and deletion is easy in linked list  
- more space needed 
- searching is easy 

** Circular link list  
- all nodes have valid adress 
- last node contaion the adress of first node 
- can go to any node 
- saves the time 


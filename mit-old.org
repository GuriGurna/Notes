* Lecture 1
  *skills
   computational thinking
   to understand code 
   understand abilities and limits 
    
  computation type
  declarative and imperative

  *memory contains 
    control centre - set of instructions 
    airthmetic logic unit-converts input into output
    program counter -helps changing the instructions 

  *good set of primitives helps programmer to build a good program 

  *python 
  high lvl language - more advanced set of primitives are used as used in low lvl language 
  general lvl language 
  interpreted language understand-uses code and run the program rather than going through compiler and 
    catching the bugs
  
  *syntax -how to put together the expressions or informatrion
  *static sematics - helps to understandwhat programs are meaningful 
  *sematics - what happens whhen we run code 

  *values 
   numbers or integers 
   string - set of characters 

   *operators
   +-*

   *comments - use for mentioning any type of information 
    # is used to write any comment 


* lecture  2 
    string contains the data 
    interpreter evalutes and print the code
    statemts = legal commands that python can interpret  
     ** print , assignment
    variables name = should be familier to the point

    * branching program 
    can change the order of instruction based on the text (usually value of variable)
  
    if <some text >:
       set of instruction 
    else :
      set of instructions      

   * boolean combination
    and or not 
    types = true false    

 * lecture 3
      data = numbers , strings , boooleans 
      commands = conditionals  , input and output , assignment , loop mechanicms
      operators  = +-and or 
      

      *iterative programs 
      choose variable that count 
      initilise outisde the loop
      set up end test variable 
      change variable 
      what t do when done 


      * exhaustive enumeration 
       trying all the reasonable values until you find the solution 

     * tuple 
       it is an ordered sequence of the elements 
       it is enclosed by the bracketes with values in it 
       test [1,2,3,4,5]

       selection test[2]
       selection test[3:4]

       it also work with strings like selection and slicing of strings 
       s1 = asdfghj

       s1[2]  

* lecture 4 
   not easy to understand several lines of code and what their use 
   not having decomposition and abstraction 

   *solution is to add function to it 
     helps in creating modules     
     supress detail 
     and to create new perimiteres 

    def = keyword    (define)
    return = keyword
    none = special value 

    imvoke the function by passin in values for the paremeters 
    sqrt(16)  it binds x to 16 locally 
    local bindings does not affect any global bindings 
    
    interpreter are global binding


    * farm yard problem = 
      farmer observers 20 heads and 56 legs 
      including chickens and pigs 
      let 
      no of pigs + no of chickens = 20
      4 no of pigs  + 2 no of chickens = 56

      brute force algorithim 

     * recursion
      base case = which is simpliest solution 

      inductive step 
        which is breaking the problem into simple version of same problem with other steps  